node {
	def auraDeployCmd = 'MAVEN_OPTS="-Dorg.slf4j.simpleLogger.log.no.nav=debug" mvn clean aura:deploy'
	def fasitUrl = "https://fasit.nais.preprod.local" // "https://e34jbsl01657.devillo.no:8443/"
	def releaseVersion, commiter, committerEmail
	def mvnHome = tool "maven-3.3.9"
	def dockerRepo = "docker.adeo.no:5000"
	def application = "fasit"

	try {
	    stage("checkout") {
			git url: 'ssh://git@stash.devillo.no:7999/aura/fasit.git'
	    }

	    stage("Check for SNAPSHOT dependencies") {
			def pom = readMavenPom file: 'pom.xml'

			commiter = sh(script: 'git log -1 --pretty=format:"%ae (%an)"', returnStdout: true).trim()
			committerEmail = sh(script: 'git log -1 --pretty=format:"%ae"', returnStdout: true).trim()
			changelog = sh(script: 'git log `git describe --tags --abbrev=0`..HEAD --oneline', returnStdout: true)

			releaseVersion = pom.version.tokenize("-")[0] + "-" + sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()

			sh 'echo "Verifying that no snapshot dependencies are being used."'
			sh 'grep module pom.xml | cut -d">" -f2 | cut -d"<" -f1 > snapshots.txt'
			sh 'echo "./" >> snapshots.txt'
			sh 'while read line;do if [ "$line" != "" ];then if [ `grep SNAPSHOT $line/pom.xml | wc -l` -gt 1 ];then echo "SNAPSHOT-dependencies found. See file $line/pom.xml.";exit 1;fi;fi;done < snapshots.txt'
		}

	    stage("Build and test") {
			withEnv(['HTTP_PROXY=http://webproxy-utvikler.nav.no:8088', 'NO_PROXY=adeo.no']) {
			    sh "mkdir -p /tmp/fasit"
				sh "mvn clean install -Djava.io.tmpdir=/tmp/fasit -B -e"
			}
		}

		stage("Build Docker container") {
            sh "docker build -t ${dockerRepo}/${application}:${releaseVersion} ."
        }

        stage("Push Docker container") {
            sh "docker push ${dockerRepo}/${application}:${releaseVersion}"
        }

        stage("Deploy to dev") {
            sh "KUBECONFIG=/home/jenkins/kubeconfigs/kubeconfig ./nais/deploy-dev.sh ${releaseVersion}"
        }

	    /*stage("Integration tests") {
			parallel(
				'WasIntegrationTest': {
				    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'srvFasit', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
					    sh "${auraDeployCmd} -Dapps=was-testapp:RELEASE -Denv=cd-u1 -Dusername=${env.USERNAME} -Dpassword=${env.PASSWORD} -DfasitUrl=${fasitUrl} -Ddebug=true -e"
					}
				},
				'JbossIntegrationTest': {
				    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'srvFasit', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
					    sh "${auraDeployCmd} -Dapps=jboss-testapp:RELEASE -Denv=cd-u1 -Dusername=${env.USERNAME} -Dpassword=${env.PASSWORD} -DfasitUrl=${fasitUrl} -Ddebug=true -e"
					}
				}
			)
		}*/

		stage("Deploy to prod") {
            sh "KUBECONFIG=/home/jenkins/kubeconfigs/kubeconfig ./nais/deploy-prod.sh ${releaseVersion}"
        }
	    def message = ":nais: Successfully deployed fasit:${releaseVersion} to prod\nhttps://fasit.nais.adeo.no"
	    slackSend channel: '#nais-ci', message: "${message}", teamDomain: 'nav-it', tokenCredentialId: 'slack_fasit_frontend'
		
    } catch (e) {
		currentBuild.result = "FAILED"
		throw e
        def message = ":shit: fasit pipeline failed. See jenkins for more info ${env.BUILD_URL}\nLast commit ${changelog}"
        hipchatSend channel: '#nais-ci', message: "${message}", teamDomain: 'nav-it', tokenCredentialId: 'slack_fasit_frontend'
    }
} 
